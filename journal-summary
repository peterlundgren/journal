#!/usr/bin/python


import datetime
import re
import sys


class JournalEntry(object):
    def __init__(self, datetime, text):
        self.datetime = datetime
        self.text = text
        self._paragraphs = None
    @property
    def paragraphs(self):
        if self._paragraphs is None:
            self._parse_paragraphs()
        return self._paragraphs
    def _parse_paragraphs(self):
        self._paragraphs = []
        current_paragraph = ''
        for line in self.text:
            if line.strip():
                current_paragraph += line
            else:
                if current_paragraph:
                    self._paragraphs.append(current_paragraph)
                    current_paragraph = ''
        if current_paragraph:
            self._paragraphs.append(current_paragraph)
    def __str__(self):
        return '[' + str(self.datetime) + ']\n' + str(self.paragraphs)


class DailySummary(object):
    def __init__(self, date):
        self.date = date
        self.entries = []
    def add_entry(self, entry):
        self.entries.append(entry)


def parse_journal(input_file_name):
    timestamp = re.compile('\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\]')
    journal_entries = []
    current_entry_datetime = None
    current_entry_text = []
    input_file = open(input_file_name)
    for line in input_file:
        if timestamp.match(line):
            journal_entries.append(JournalEntry(current_entry_datetime, current_entry_text))
            current_entry_text = []
            current_entry_datetime = datetime.datetime.strptime(line[1:20], '%Y-%m-%d %H:%M:%S')
        else:
            current_entry_text.append(line)
    if current_entry_text:
        journal_entries.append(JournalEntry(current_entry_datetime, current_entry_text))
    return journal_entries


def daily(journal_entries):
    daily_summaries = dict()
    current_date = None
    for journal_entry in journal_entries:
        for paragraph in journal_entry.paragraphs:
            if paragraph.startswith('SUMMARY:'):
                date = journal_entry.datetime.date()
                if date in daily_summaries:
                    daily_summaries[date].add_entry(paragraph[9:])
                else:
                    daily_summaries[date] = DailySummary(date)
                    daily_summaries[date].add_entry(paragraph[9:])
    previous_date = None
    for date in sorted(daily_summaries, reverse=True):
        if (previous_date and
            (previous_date.weekday() <= date.weekday() or
             previous_date.toordinal() - date.toordinal() > 7)):
            print '---'
        previous_date = date
        daily_summary = daily_summaries[date]
        print '*   ', date.strftime('%A %Y-%m-%d')
        for entry in daily_summary.entries:
            first = True
            for line in entry.strip().split('\n'):
                if first:
                    first = False
                    print '    *   ' + line
                else:
                    print '        ' + line


def weekly(journal_entries):
    weekly_summaries = dict()
    current_date = None
    for journal_entry in journal_entries:
        in_weekly_summary = False
        for paragraph in journal_entry.paragraphs:
            if in_weekly_summary:
                weekly_summaries[date].append(paragraph)
            elif paragraph.startswith('WEEKLY SUMMARY:'):
                date = journal_entry.datetime.date()
                weekly_summaries[date] = [paragraph[16:]]
                in_weekly_summary = True
    previous_date = None
    for date in sorted(weekly_summaries, reverse=True):
        if (previous_date and
            (previous_date.weekday() <= date.weekday() or
             previous_date.toordinal() - date.toordinal() > 7)):
            print '---'
        previous_date = date
        monday = date - datetime.timedelta(date.weekday())
        friday = monday + datetime.timedelta(4)
        weekly_summary = weekly_summaries[date]
        print '*   ', monday.strftime('%A %Y-%m-%d'), 'through', friday.strftime('%A %Y-%m-%d')
        for entry in weekly_summary:
            first = True
            for line in entry.strip().split('\n'):
                print '    ' + line
            print


def main():
    input_file_name = sys.argv[2]
    journal_entries = parse_journal(input_file_name)
    if sys.argv[1] == 'daily':
        daily(journal_entries)
    elif sys.argv[1] == 'weekly':
        weekly(journal_entries)


if __name__ == '__main__':
    main()

